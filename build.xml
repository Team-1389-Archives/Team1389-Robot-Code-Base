<?xml version="1.0" encoding="UTF-8"?>

<!-- Note to people wondering what this file is:
Files called build.xml are scripts for a build tool called "ant" (google it).
The job of this file is to describe how the java program is compiled and stuffed into a jar file.

This file is not meant to be run by itself because this is the base project.
Projects that use this base project, created from the template project, should have a build.xml file
that automatically calls this one.-->

<project name="FRC Deployment">

	<!-- This bit of code gets the names of all files in the lib folder and puts them in a property called userLibs-->
	<pathconvert pathsep=":" property="userLibs">
		<path>
			<fileset dir="lib">
				<include name="*" />
			</fileset>
		</path>
	</pathconvert>


	<property file="build.properties" />
	<property file="${user.home}/wpilib/wpilib.properties" />
	<property file="${user.home}/wpilib/java/${version}/ant/build.properties" />

	<import file="${wpilib.ant.dir}/build.xml" />
	
	<target name="explain-purpose">
		<echo>This repository, Team1389-Robot-Code-Base, is not meant to be deployed to a robot by itself. See the README for it's intended use.</echo>
		<fail/>
	</target>

	<!--
		This target is called by the build file in Team1389-Base-Project-Template.
		It compiles the Base as a lib and puts in a jar in the export folder.
	-->
	<target name="jar-as-lib" depends="clean, compile">
		<echo>[athena-jar] Making Jar for export as lib ${build.jars}</echo>
		<mkdir dir="${build.jars}" />
		<mkdir dir="export" />

		<echo>[athena-jar] Copying jars from ${classpath}:${userLibs} to ${build.jars}.</echo>
		<copy todir="${build.jars}" flatten="true" verbose="true">
			<path>
				<pathelement path="${classpath}:${userLibs}" />
			</path>
		</copy>

		<jar destfile="${export.jar}" update="false">
			<fileset dir="${build.dir}" includes="**/*.class" />
			<zipgroupfileset dir="${build.jars}">
				<include name="**/*.jar" />
			</zipgroupfileset>

			<!-- The following two things have been added by team1389. They add the libraries and Resources folder into the final jar.-->

			<zipgroupfileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
			<fileset dir="${resources.dir}" />
			<fileset dir="${src.dir}" includes="**/*.java" />
			<fileset dir="${build.dir}" includes="**/*.class" />
		</jar>
	</target>
	
	<target name="deploy" depends="explain-purpose"></target>

</project>
